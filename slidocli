#!/usr/bin/env bash

set -e
set -u
set -o pipefail


# -------------------------------------------------------------------------------------------------
# VARIABLES
# -------------------------------------------------------------------------------------------------

###
### Version information
###
VERSION_DATE="2019-09-13"
VERSION_NUMBER="v0.1"
VERSION_GITHUB="https://github.com/cytopia/slidocli"
VERSION_AUTHOR="cytopia"

###
### Command line arguments
###
ARG_QID=
ARG_VERBOSE=0
ARG_DUMP=0

###
### Slido URLs
###
SLIDO_EVENT_API_URL="https://app.sli.do/api/v0.5/events?hash=__HASH__"
SLIDO_AUTH_USER_URL="https://app.sli.do/api/v0.5/events/__UUID__/auth"
SLIDO_AUTH_EVENT_URL="https://app.sli.do/api/v0.5/events/__UUID__"
SLIDO_QUESTIONS_URL="https://app.sli.do/api/v0.5/events/__UUID__/questions?path=%2Fquestions&eventSectionId=__EVENT_SEC_ID__&sort=top&highlighted_first=true&limit=30"
SLIDO_UPVOTE_URL="https://app.sli.do/api/v0.5/events/__UUID__/questions/__QID__/like"



# -------------------------------------------------------------------------------------------------
# FUNCTIONS
# -------------------------------------------------------------------------------------------------

###
### Print usage/help screen
###
print_usage() {
	echo "USAGE: slidocli [-v] [-d] [-q question-id] SLIDO-URL"
	echo "       slidocli -h"
	echo
	echo "DESCRIPTION:"
	echo "  Command line utility to list available questions on sli.do and"
	echo "  automatically upvote any question specified by their id."
	echo "  If only the SLIDO-URL is specified, this tool lists available questions"
	echo "  and their according ids. To upvote a question, use -q."
	echo
	echo "ARGUMENTS:"
	echo "  -v               Be verbose: show curl requests."
	echo "  -d               Dump curl output to file for later inspection."
	echo "  -q question-id   The question to upvote."
	echo
	echo "DISCLAIMER:"
	echo "  This tool is for educational purposes only and must not be used to"
	echo "  upvote any questions on sli.do, as it most likely violates their"
	echo "  terms  and services. Use at your own risk."
	echo "  https://www.sli.do/acceptable-use"
	echo
	echo "EXAMPLES:"
	echo "  List all questions of an event:"
	echo "  \$ slidocli https://app.sli.do/event/abcdef123"
	echo
	echo "  Upvote a specific question of an event:"
	echo "  \$ slidocli -q '1234567' https://app.sli.do/event/abcdef123"
	echo
	echo "  Upvote 3 times:"
	echo "  \$ for i in \`seq 3\`; do slidocli -q '1234567' https://app.sli.do/event/abcdef123; done"
	echo
	echo "  Upvote 3 times with 10 sec break in between:"
	echo "  \$ for i in \`seq 3\`; do slidocli -q '1234567' https://app.sli.do/event/abcdef123; sleep 10; done"
}


###
### Get a random useragent
###
get_random_ua() {
	local ua=(
		"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR 1.0.3705)"
		"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FSL 7.0.5.01003)"
		"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FSL 7.0.6.01001)"
		"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FSL 7.0.7.01001)"
		"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
		"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Media Center PC"
		"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)"
		"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"
		"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"
		"Mozilla/5.0 (Linux; Android 5.0; SAMSUNG SM-N900 Build/LRX21V) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/2.1 Chrome/34.0.1847.76 Mobile Safari/537.36"
		"Mozilla/5.0 (Linux; Android 6.0.1; SAMSUNG SM-N910F Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/4.0 Chrome/44.0.2403.133 Mobile Safari/537.36"
		"Mozilla/5.0 (Linux; U; Android-4.0.3; en-us; Galaxy Nexus Build/IML74K) AppleWebKit/535.7 (KHTML, like Gecko) CrMo/16.0.912.75 Mobile Safari/535.7"
		"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:34.0) Gecko/20100101 Firefox/34.0"
		"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-en) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4"
		"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"
		"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
		"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0"
		"Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1"
		"Mozilla/5.0 (Windows NT 5.1; rv:5.0.1) Gecko/20100101 Firefox/5.0.1"
		"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1"
		"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"
		"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:11.0) Gecko/20100101 Firefox/11.0"
		"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0"
		"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1"
		"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.85 Safari/537.36"
		"Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.02"
		"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36"
		"Mozilla/5.0 (Windows NT 6.3; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0"
		"Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)"
		"Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.2.8) Gecko/20100723 Ubuntu/10.04 (lucid) Firefox/3.6.8"
		"Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko"
		"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)"
		"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; MDDCJS)"
		"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0)"
		"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0;  Trident/5.0)"
		"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)"
		"Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1 Mobile/15E148 Safari/604.1"
		"Mozilla/5.0 (iPad; CPU OS 8_4_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12H321 Safari/600.1.4"
		"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1"
		"Mozilla/5.0 (iPhone; CPU iPhone OS 11_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.0 Mobile/15E148 Safari/604.1"
		"Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1"
		"Mozilla/5.0 (iPhone; CPU iPhone OS 12_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Mobile/15E148 Safari/604.1"
		"Opera/9.80 (Windows NT 5.1; U; en) Presto/2.10.289 Version/12.01"
	)

	cnt="${#ua[@]}"
	ind="$(( RANDOM % cnt ))"
	echo "${ua[${ind}]}"
}


###
### Get random DNT value (0 or 1)
###
get_random_dnt() {
	# Get either '0' or '1'
	echo "$(( RANDOM % 2 ))"
}


###
### Get temporary cookie file
###
get_tmp_file() {
	if ! command -v mktemp >/dev/null 2>&1; then
		if [ -n "${XDG_CACHE_HOME}" ] && [ -d "${XDG_CACHE_HOME}" ] && [ -w "${XDG_CACHE_HOME}" ]; then
			touch "${XDG_CACHE_HOME}/sldio.cookie"
			echo "${XDG_CACHE_HOME}/slido.cookie"
		else
			touch /tmp/slido.cookie
			echo "/tmp/slido.cookie"
		fi
	else
		mktemp
	fi
}


###
### Get dump dir
###
get_dump_dir() {
	if ! command -v mktemp >/dev/null 2>&1; then
		if [ -n "${XDG_CACHE_HOME}" ] && [ -d "${XDG_CACHE_HOME}" ] && [ -w "${XDG_CACHE_HOME}" ]; then
			mkdir -p "${XDG_CACHE_HOME}/slido/dumps"
			echo "${XDG_CACHE_HOME}/slido/dumps"
		else
			mkdir -p /tmp/slido/dumps
			echo "/tmp/slido/dumps"
		fi
	else
		mktemp -d
	fi
}


###
### Wrapper for curl requests
###
### @param method  string  GET or POST
### @param url     string  URL to request
### @param cookie  string  (optional) File to load/save cookie
### @param data    string  (optional) Data to submit to request
### @param headers array   (optional) Array of headers to append to request
request() {
	local method="${1}"
	local url="${2}"
	local cookie="${3:-}"
	local data="${4:-}"
	shift; shift; shift; shift
	# Everything else is headers to append
	local headers=("${@}")

	# Base command
	local cmd="curl -sS"

	# Setup request method
	if [ "${method}" = "GET" ]; then
		cmd="${cmd} -XGET"
	elif [ "${method}" = "POST" ]; then
		cmd="${cmd} -XPOST"
	else
		>&2 echo "Error, unsupported method specified: ${method}"
		exit 1
	fi

	# Append cookie
	if [ -n "${cookie}" ]; then
		cmd="${cmd} -c ${cookie} -b ${cookie}"
	fi

	# Append data
	if [ -n "${data}" ]; then
		cmd="${cmd} -d '${data}'"
	fi

	# Append request headers
	for header in "${headers[@]}"; do
		cmd="${cmd} -H '${header}'"
	done

	# Append URL
	cmd="${cmd} '${url}'"

	# Output and execute
	if [ "${ARG_VERBOSE}" = "1" ]; then
		echo >&2 "${cmd}"
		echo >&2
	fi
	eval "${cmd}"
}


###
### Get final URL after redirects
###
get_effective_url() {
	local url="${1}"
	curl -Ls -o /dev/null -w '%{url_effective}' "${url}"
}


###
### Wrapper for slido requests
###
### Required global variables:
###    VALUE_UA
###    VALUE_DNT
###    VALUE_REFERER
###
### @param method     string  GET or POST
### @param url        string  URL to request
### @param cookie     string  File to load/save cookie
### @param auth_token string  (optional) Slido Auth token to add to request headers
### @param data       string  (optional) Data to submit to request
slido_request() {
	local method="${1}"
	local url="${2}"
	local cookie="${3}"
	local auth_token="${4:-}"
	local data="${5:-}"
	local headers=()

	headers+=(
		"User-Agent: ${VALUE_UA}"
		"DNT: ${VALUE_DNT}"
		"Referer: ${VALUE_REFERER}"
		"Cache-Control: no-cache, no-store"
		"Accept: application/json, text/plain, */*"
	)
	if [ -n "${auth_token}" ]; then
		headers+=("Authorization: Bearer ${auth_token}")
	fi

	if [ "${method}" = "POST" ];then
		request "POST" "${url}" "${cookie}" "${data}" "${headers[@]}"
	else
		request "GET" "${url}" "${cookie}" "${data}" "${headers[@]}"
	fi
}



# -------------------------------------------------------------------------------------------------
# ARGUMENT ENTRYPOINT
# -------------------------------------------------------------------------------------------------

# Parse input args with getopts
while getopts ":vdq:h-:" options; do
	# ----- long options
	if [ "${options}" = "-" ]; then
		options="${OPTARG}"
		[ -z "${options}" ] && break	# "--" terminates argument processing
	fi
	case "${options}" in
		# ---- Help / version
		h)
			print_usage
			exit
			;;
		# ----- Options
		q)
			ARG_QID="${OPTARG}"
			;;
		v)
			ARG_VERBOSE=1
			;;
		d)
			ARG_DUMP=1
			;;
		:)
			>&2 echo "Error: -${OPTARG} requires an argument."
			exit 1
			;;
		\?)
			>&2 echo "Error: Unknown option1 -${OPTARG}, see -h for help."
			exit 1
			;;
		*)	>&2 echo "Error: Unknown option2 --${options}, see -h for help."
			exit 1
			;;
	esac
done
shift $((OPTIND-1))		# remove parsed options and args from $@ list

if [ "${#}" -ne "1" ]; then
	>&2 echo "Error: <url> argument is required, see -h for help."
	exit 1
fi



# -------------------------------------------------------------------------------------------------
# PRE-FLIGHT-CHECK ENTRYPOINT
# -------------------------------------------------------------------------------------------------

if ! command -v curl >/dev/null 2>&1; then
	echo "Error, curl binary required"
	exit 1
fi
if ! command -v jq >/dev/null 2>&1; then
	echo "Error, jq binary required"
	exit 1
fi



# -------------------------------------------------------------------------------------------------
# MAIN ENTRYPOINT
# -------------------------------------------------------------------------------------------------

echo
echo "            ██████  ██▓     ██▓▓█████▄  ▒█████   ▄████▄   ██▓     ██▓"
echo "          ▒██    ▒ ▓██▒    ▓██▒▒██▀ ██▌▒██▒  ██▒▒██▀ ▀█  ▓██▒    ▓██▒"
echo "          ░ ▓██▄   ▒██░    ▒██▒░██   █▌▒██░  ██▒▒▓█    ▄ ▒██░    ▒██▒"
echo "            ▒   ██▒▒██░    ░██░░▓█▄   ▌▒██   ██░▒▓▓▄ ▄██▒▒██░    ░██░"
echo "          ▒██████▒▒░██████▒░██░░▒████▓ ░ ████▓▒░▒ ▓███▀ ░░██████▒░██░"
echo "          ▒ ▒▓▒ ▒ ░░ ▒░▓  ░░▓   ▒▒▓  ▒ ░ ▒░▒░▒░ ░ ░▒ ▒  ░░ ▒░▓  ░░▓"
echo "          ░ ░▒  ░ ░░ ░ ▒  ░ ▒ ░ ░ ▒  ▒   ░ ▒ ▒░   ░  ▒   ░ ░ ▒  ░ ▒ ░"
echo "          ░  ░  ░    ░ ░    ▒ ░ ░ ░  ░ ░ ░ ░ ▒  ░          ░ ░    ▒ ░"
echo "                ░      ░  ░ ░     ░        ░ ░  ░ ░          ░  ░ ░"
echo "                                ░               ░"
echo
echo "          Use at your own risk and adhere to sli.do terms and services"
echo
echo "                                ${VERSION_NUMBER} (${VERSION_DATE})"
echo "                       ${VERSION_GITHUB}"
echo "                                   By ${VERSION_AUTHOR}"
echo
echo "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
echo


### ------------------------------------------------------------
### 01. Initialize
### ------------------------------------------------------------
echo
echo "                                  INITIALIZING"
echo

VALUE_REFERER="${1}"
SLIDO_START_URL="$( get_effective_url "${VALUE_REFERER}" )"
SLIDO_HASH="$( echo "${SLIDO_START_URL}" | sed 's|.*/event/||' )"
SLIDO_HASH="${SLIDO_HASH%%/*}"
VALUE_UA="$( get_random_ua )"
VALUE_DNT="$( get_random_dnt )"
COOKIE="$( get_tmp_file )"
DUMP_DIR=""

echo "Request URL:     ${VALUE_REFERER}"
echo "Slido URL:       ${SLIDO_START_URL}"
echo "Slido hash:      ${SLIDO_HASH}"
echo "Random UA:       ${VALUE_UA:0:62}..."
echo "Random DNT:      ${VALUE_DNT}"
echo "Cookie path:     ${COOKIE}"
if [ "${ARG_DUMP}" = "1" ]; then
	DUMP_DIR="$( get_dump_dir )"
	echo "Dump path:       ${DUMP_DIR}"
else
	echo "Dump path:       not set"
fi


### ------------------------------------------------------------
### 02. Gather event
### ------------------------------------------------------------
echo
echo "                              GATHERING EVENT DATA"
echo

VALUE_REFERER="${SLIDO_START_URL}"
SLIDO_EVENT_API_URL="$( echo "${SLIDO_EVENT_API_URL}" | sed "s|__HASH__|${SLIDO_HASH}|" )"
SLIDO_START_DATA="$( slido_request "GET" "${SLIDO_START_URL}" "${COOKIE}" )"
if [ "${ARG_DUMP}" = "1" ]; then echo "${SLIDO_START_DATA}" > "${DUMP_DIR}/01-startpage.txt"; fi
SLIDO_EVENT_DATA="$( slido_request "GET" "${SLIDO_EVENT_API_URL}" "${COOKIE}" )"
if [ "${ARG_DUMP}" = "1" ]; then echo "${SLIDO_EVENT_DATA}" > "${DUMP_DIR}/02-eventpage.txt"; fi

NAME="$( echo "${SLIDO_EVENT_DATA}" | jq -r '.[].name' )"
CODE="$( echo "${SLIDO_EVENT_DATA}" | jq -r '.[].code' )"
EVENT_ID="$( echo "${SLIDO_EVENT_DATA}" | jq -r '.[].event_id' )"
EVENT_GROUP_ID="$( echo "${SLIDO_EVENT_DATA}" | jq -r '.[].event_group_id' )"
UUID="$( echo "${SLIDO_EVENT_DATA}" | jq -r '.[].uuid' )"

echo "Slido event URL: ${SLIDO_EVENT_API_URL}"
echo "Name:            ${NAME}"
echo "Code:            ${CODE}"
echo "Event ID:        ${EVENT_ID}"
echo "Event Group ID:  ${EVENT_GROUP_ID}"
echo "UUID:            ${UUID}"


### ------------------------------------------------------------
### 03. Authenticating User
### ------------------------------------------------------------
echo
echo "                               AUTHENTICATING USER"
echo

SLIDO_AUTH_USER_URL="https://app.sli.do/api/v0.5/events/__UUID__/auth"
SLIDO_AUTH_USER_URL="$( echo "${SLIDO_AUTH_USER_URL}" | sed "s|__UUID__|${UUID}|" )"
SLIDO_AUTH_USER_DATA="$( slido_request "POST" "${SLIDO_AUTH_USER_URL}" "${COOKIE}" )"
if [ "${ARG_DUMP}" = "1" ]; then echo "${SLIDO_AUTH_USER_DATA}" > "${DUMP_DIR}/03-auth-user.txt"; fi

ACCESS_TOKEN="$( echo "${SLIDO_AUTH_USER_DATA}" | jq -r '.access_token' )"
EVENT_ID="$( echo "${SLIDO_AUTH_USER_DATA}" | jq -r '.event_id' )"
EVENT_USER_ID="$( echo "${SLIDO_AUTH_USER_DATA}" | jq -r '.event_user_id' )"

echo "Slido auth URL:  ${SLIDO_AUTH_USER_URL}"
echo "Acess Token:     ${ACCESS_TOKEN}"
echo "Event User ID:   ${EVENT_USER_ID}"


if [ -z "${ARG_QID}" ]; then
	### ------------------------------------------------------------
	### 04. Authenticating Event
	### ------------------------------------------------------------
	echo
	echo "                              AUTHENTICATING EVENT"
	echo

	SLIDO_AUTH_EVENT_URL="$( echo "${SLIDO_AUTH_EVENT_URL}" | sed "s|__UUID__|${UUID}|" )"
	SLIDO_AUTH_EVENT_DATA="$( slido_request "GET" "${SLIDO_AUTH_EVENT_URL}" "${COOKIE}" "${ACCESS_TOKEN}" )"
	if [ "${ARG_DUMP}" = "1" ]; then echo "${SLIDO_AUTH_EVENT_DATA}" > "${DUMP_DIR}/04-auth-event.txt"; fi

	EVENT_SECTION_ID="$( echo "${SLIDO_AUTH_EVENT_DATA}" | jq -r '.sections[].event_section_id' )"
	ROOM="$( echo "${SLIDO_AUTH_EVENT_DATA}" | jq -r '.sections[].name' )"

	echo "Slido auth URL:  ${SLIDO_AUTH_EVENT_URL}"
	echo "Event Sect ID:   ${EVENT_SECTION_ID}"
	echo "Room:            ${ROOM}"



	### ------------------------------------------------------------
	### 05. Listing Questions
	### ------------------------------------------------------------
	echo
	echo "                                LISTING QUESTIONS"
	echo

	SLIDO_QUESTIONS_URL="$( echo "${SLIDO_QUESTIONS_URL}" | sed "s|__UUID__|${UUID}|" )"
	SLIDO_QUESTIONS_URL="$( echo "${SLIDO_QUESTIONS_URL}" | sed "s|__EVENT_SEC_ID__|${EVENT_SECTION_ID}|" )"
	SLIDO_QUESTIONS_DATA="$( slido_request "GET" "${SLIDO_QUESTIONS_URL}" "${COOKIE}" "${ACCESS_TOKEN}" )"
	if [ "${ARG_DUMP}" = "1" ]; then echo "${SLIDO_QUESTIONS_DATA}" > "${DUMP_DIR}/05-questions.txt"; fi
	echo "${SLIDO_QUESTIONS_DATA}" | jq -r '[[.[].event_question_id|tostring],[.[].score|tostring], [.[].text]] | transpose | . []'

else

	### ------------------------------------------------------------
	### 06. Upvoting
	### ------------------------------------------------------------
	echo
	echo "                                    UPVOTING"
	echo

	SLIDO_UPVOTE_URL="$( echo "${SLIDO_UPVOTE_URL}" | sed "s|__UUID__|${UUID}|" )"
	SLIDO_UPVOTE_URL="$( echo "${SLIDO_UPVOTE_URL}" | sed "s|__QID__|${ARG_QID}|" )"
	SLIDO_UPVOTE_DATA="$( slido_request "POST" "${SLIDO_UPVOTE_URL}" "${COOKIE}" "${ACCESS_TOKEN}" '{"score":1}' )"
	if [ "${ARG_DUMP}" = "1" ]; then echo "${SLIDO_UPVOTE_DATA}" > "${DUMP_DIR}/06-upvote.txt"; fi
	NEW_SCORE="$( echo "${SLIDO_UPVOTE_DATA}" | jq -r '.event_question_score' )"

	echo "Voted question:  ${ARG_QID}"
	echo "New score:       ${NEW_SCORE}"
fi



# -------------------------------------------------------------------------------------------------
# Clean up
# -------------------------------------------------------------------------------------------------
rm -f "${COOKIE}"
